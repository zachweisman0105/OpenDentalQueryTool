{"timestamp":"2025-10-23T01:42:39.361Z","type":"session_meta","payload":{"id":"019a0ebb-686a-7872-9809-1bf5831a6693","timestamp":"2025-10-23T01:42:34.346Z","cwd":"c:\\Imagine\\AI\\Playground\\spec-kit\\OpenDentalQueryTool","originator":"codex_vscode","cli_version":"0.47.0","instructions":"# AGENTS.md\n\n## About Spec Kit and Specify\n\n**GitHub Spec Kit** is a comprehensive toolkit for implementing Spec-Driven Development (SDD) - a methodology that emphasizes creating clear specifications before implementation. The toolkit includes templates, scripts, and workflows that guide development teams through a structured approach to building software.\n\n**Specify CLI** is the command-line interface that bootstraps projects with the Spec Kit framework. It sets up the necessary directory structures, templates, and AI agent integrations to support the Spec-Driven Development workflow.\n\nThe toolkit supports multiple AI coding assistants, allowing teams to use their preferred tools while maintaining consistent project structure and development practices.\n\n---\n\n## General practices\n\n- Any changes to `__init__.py` for the Specify CLI require a version rev in `pyproject.toml` and addition of entries to `CHANGELOG.md`.\n\n## Adding New Agent Support\n\nThis section explains how to add support for new AI agents/assistants to the Specify CLI. Use this guide as a reference when integrating new AI tools into the Spec-Driven Development workflow.\n\n### Overview\n\nSpecify supports multiple AI agents by generating agent-specific command files and directory structures when initializing projects. Each agent has its own conventions for:\n\n- **Command file formats** (Markdown, TOML, etc.)\n- **Directory structures** (`.claude/commands/`, `.windsurf/workflows/`, etc.)\n- **Command invocation patterns** (slash commands, CLI tools, etc.)\n- **Argument passing conventions** (`$ARGUMENTS`, `{{args}}`, etc.)\n\n### Current Supported Agents\n\n| Agent | Directory | Format | CLI Tool | Description |\n|-------|-----------|---------|----------|-------------|\n| **Claude Code** | `.claude/commands/` | Markdown | `claude` | Anthropic's Claude Code CLI |\n| **Gemini CLI** | `.gemini/commands/` | TOML | `gemini` | Google's Gemini CLI |\n| **GitHub Copilot** | `.github/prompts/` | Markdown | N/A (IDE-based) | GitHub Copilot in VS Code |\n| **Cursor** | `.cursor/commands/` | Markdown | `cursor-agent` | Cursor CLI |\n| **Qwen Code** | `.qwen/commands/` | TOML | `qwen` | Alibaba's Qwen Code CLI |\n| **opencode** | `.opencode/command/` | Markdown | `opencode` | opencode CLI |\n| **Codex CLI** | `.codex/commands/` | Markdown | `codex` | Codex CLI |\n| **Windsurf** | `.windsurf/workflows/` | Markdown | N/A (IDE-based) | Windsurf IDE workflows |\n| **Kilo Code** | `.kilocode/rules/` | Markdown | N/A (IDE-based) | Kilo Code IDE |\n| **Auggie CLI** | `.augment/rules/` | Markdown | `auggie` | Auggie CLI |\n| **Roo Code** | `.roo/rules/` | Markdown | N/A (IDE-based) | Roo Code IDE |\n| **CodeBuddy CLI** | `.codebuddy/commands/` | Markdown | `codebuddy` | CodeBuddy CLI |\n| **Amazon Q Developer CLI** | `.amazonq/prompts/` | Markdown | `q` | Amazon Q Developer CLI |\n| **Amp** | `.agents/commands/` | Markdown | `amp` | Amp CLI |\n\n### Step-by-Step Integration Guide\n\nFollow these steps to add a new agent (using a hypothetical new agent as an example):\n\n#### 1. Add to AGENT_CONFIG\n\n**IMPORTANT**: Use the actual CLI tool name as the key, not a shortened version.\n\nAdd the new agent to the `AGENT_CONFIG` dictionary in `src/specify_cli/__init__.py`. This is the **single source of truth** for all agent metadata:\n\n```python\nAGENT_CONFIG = {\n    # ... existing agents ...\n    \"new-agent-cli\": {  # Use the ACTUAL CLI tool name (what users type in terminal)\n        \"name\": \"New Agent Display Name\",\n        \"folder\": \".newagent/\",  # Directory for agent files\n        \"install_url\": \"https://example.com/install\",  # URL for installation docs (or None if IDE-based)\n        \"requires_cli\": True,  # True if CLI tool required, False for IDE-based agents\n    },\n}\n```\n\n**Key Design Principle**: The dictionary key should match the actual executable name that users install. For example:\n\n- ✅ Use `\"cursor-agent\"` because the CLI tool is literally called `cursor-agent`\n- ❌ Don't use `\"cursor\"` as a shortcut if the tool is `cursor-agent`\n\nThis eliminates the need for special-case mappings throughout the codebase.\n\n**Field Explanations**:\n\n- `name`: Human-readable display name shown to users\n- `folder`: Directory where agent-specific files are stored (relative to project root)\n- `install_url`: Installation documentation URL (set to `None` for IDE-based agents)\n- `requires_cli`: Whether the agent requires a CLI tool check during initialization\n\n#### 2. Update CLI Help Text\n\nUpdate the `--ai` parameter help text in the `init()` command to include the new agent:\n\n```python\nai_assistant: str = typer.Option(None, \"--ai\", help=\"AI assistant to use: claude, gemini, copilot, cursor-agent, qwen, opencode, codex, windsurf, kilocode, auggie, codebuddy, new-agent-cli, or q\"),\n```\n\nAlso update any function docstrings, examples, and error messages that list available agents.\n\n#### 3. Update README Documentation\n\nUpdate the **Supported AI Agents** section in `README.md` to include the new agent:\n\n- Add the new agent to the table with appropriate support level (Full/Partial)\n- Include the agent's official website link\n- Add any relevant notes about the agent's implementation\n- Ensure the table formatting remains aligned and consistent\n\n#### 4. Update Release Package Script\n\nModify `.github/workflows/scripts/create-release-packages.sh`:\n\n##### Add to ALL_AGENTS array\n\n```bash\nALL_AGENTS=(claude gemini copilot cursor-agent qwen opencode windsurf q)\n```\n\n##### Add case statement for directory structure\n\n```bash\ncase $agent in\n  # ... existing cases ...\n  windsurf)\n    mkdir -p \"$base_dir/.windsurf/workflows\"\n    generate_commands windsurf md \"\\$ARGUMENTS\" \"$base_dir/.windsurf/workflows\" \"$script\" ;;\nesac\n```\n\n#### 4. Update GitHub Release Script\n\nModify `.github/workflows/scripts/create-github-release.sh` to include the new agent's packages:\n\n```bash\ngh release create \"$VERSION\" \\\n  # ... existing packages ...\n  .genreleases/spec-kit-template-windsurf-sh-\"$VERSION\".zip \\\n  .genreleases/spec-kit-template-windsurf-ps-\"$VERSION\".zip \\\n  # Add new agent packages here\n```\n\n#### 5. Update Agent Context Scripts\n\n##### Bash script (`scripts/bash/update-agent-context.sh`)\n\nAdd file variable:\n\n```bash\nWINDSURF_FILE=\"$REPO_ROOT/.windsurf/rules/specify-rules.md\"\n```\n\nAdd to case statement:\n\n```bash\ncase \"$AGENT_TYPE\" in\n  # ... existing cases ...\n  windsurf) update_agent_file \"$WINDSURF_FILE\" \"Windsurf\" ;;\n  \"\") \n    # ... existing checks ...\n    [ -f \"$WINDSURF_FILE\" ] && update_agent_file \"$WINDSURF_FILE\" \"Windsurf\";\n    # Update default creation condition\n    ;;\nesac\n```\n\n##### PowerShell script (`scripts/powershell/update-agent-context.ps1`)\n\nAdd file variable:\n\n```powershell\n$windsurfFile = Join-Path $repoRoot '.windsurf/rules/specify-rules.md'\n```\n\nAdd to switch statement:\n\n```powershell\nswitch ($AgentType) {\n    # ... existing cases ...\n    'windsurf' { Update-AgentFile $windsurfFile 'Windsurf' }\n    '' {\n        foreach ($pair in @(\n            # ... existing pairs ...\n            @{file=$windsurfFile; name='Windsurf'}\n        )) {\n            if (Test-Path $pair.file) { Update-AgentFile $pair.file $pair.name }\n        }\n        # Update default creation condition\n    }\n}\n```\n\n#### 6. Update CLI Tool Checks (Optional)\n\nFor agents that require CLI tools, add checks in the `check()` command and agent validation:\n\n```python\n# In check() command\ntracker.add(\"windsurf\", \"Windsurf IDE (optional)\")\nwindsurf_ok = check_tool_for_tracker(\"windsurf\", \"https://windsurf.com/\", tracker)\n\n# In init validation (only if CLI tool required)\nelif selected_ai == \"windsurf\":\n    if not check_tool(\"windsurf\", \"Install from: https://windsurf.com/\"):\n        console.print(\"[red]Error:[/red] Windsurf CLI is required for Windsurf projects\")\n        agent_tool_missing = True\n```\n\n**Note**: CLI tool checks are now handled automatically based on the `requires_cli` field in AGENT_CONFIG. No additional code changes needed in the `check()` or `init()` commands - they automatically loop through AGENT_CONFIG and check tools as needed.\n\n## Important Design Decisions\n\n### Using Actual CLI Tool Names as Keys\n\n**CRITICAL**: When adding a new agent to AGENT_CONFIG, always use the **actual executable name** as the dictionary key, not a shortened or convenient version.\n\n**Why this matters:**\n\n- The `check_tool()` function uses `shutil.which(tool)` to find executables in the system PATH\n- If the key doesn't match the actual CLI tool name, you'll need special-case mappings throughout the codebase\n- This creates unnecessary complexity and maintenance burden\n\n**Example - The Cursor Lesson:**\n\n❌ **Wrong approach** (requires special-case mapping):\n\n```python\nAGENT_CONFIG = {\n    \"cursor\": {  # Shorthand that doesn't match the actual tool\n        \"name\": \"Cursor\",\n        # ...\n    }\n}\n\n# Then you need special cases everywhere:\ncli_tool = agent_key\nif agent_key == \"cursor\":\n    cli_tool = \"cursor-agent\"  # Map to the real tool name\n```\n\n✅ **Correct approach** (no mapping needed):\n\n```python\nAGENT_CONFIG = {\n    \"cursor-agent\": {  # Matches the actual executable name\n        \"name\": \"Cursor\",\n        # ...\n    }\n}\n\n# No special cases needed - just use agent_key directly!\n```\n\n**Benefits of this approach:**\n\n- Eliminates special-case logic scattered throughout the codebase\n- Makes the code more maintainable and easier to understand\n- Reduces the chance of bugs when adding new agents\n- Tool checking \"just works\" without additional mappings\n\n#### 7. Update Devcontainer files (Optional)\n\nFor agents that have VS Code extensions or require CLI installation, update the devcontainer configuration files:\n\n##### VS Code Extension-based Agents\n\nFor agents available as VS Code extensions, add them to `.devcontainer/devcontainer.json`:\n\n```json\n{\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        // ... existing extensions ...\n        // [New Agent Name]\n        \"[New Agent Extension ID]\"\n      ]\n    }\n  }\n}\n```\n\n##### CLI-based Agents\n\nFor agents that require CLI tools, add installation commands to `.devcontainer/post-create.sh`:\n\n```bash\n#!/bin/bash\n\n# Existing installations...\n\necho -e \"\\n🤖 Installing [New Agent Name] CLI...\"\n# run_command \"npm install -g [agent-cli-package]@latest\" # Example for node-based CLI\n# or other installation instructions (must be non-interactive and compatible with Linux Debian \"Trixie\" or later)...\necho \"✅ Done\"\n\n```\n\n**Quick Tips:**\n\n- **Extension-based agents**: Add to the `extensions` array in `devcontainer.json`\n- **CLI-based agents**: Add installation scripts to `post-create.sh`\n- **Hybrid agents**: May require both extension and CLI installation\n- **Test thoroughly**: Ensure installations work in the devcontainer environment\n\n## Agent Categories\n\n### CLI-Based Agents\n\nRequire a command-line tool to be installed:\n\n- **Claude Code**: `claude` CLI\n- **Gemini CLI**: `gemini` CLI  \n- **Cursor**: `cursor-agent` CLI\n- **Qwen Code**: `qwen` CLI\n- **opencode**: `opencode` CLI\n- **Amazon Q Developer CLI**: `q` CLI\n- **CodeBuddy CLI**: `codebuddy` CLI\n- **Amp**: `amp` CLI\n\n### IDE-Based Agents\n\nWork within integrated development environments:\n\n- **GitHub Copilot**: Built into VS Code/compatible editors\n- **Windsurf**: Built into Windsurf IDE\n\n## Command File Formats\n\n### Markdown Format\n\nUsed by: Claude, Cursor, opencode, Windsurf, Amazon Q Developer, Amp\n\n```markdown\n---\ndescription: \"Command description\"\n---\n\nCommand content with {SCRIPT} and $ARGUMENTS placeholders.\n```\n\n### TOML Format\n\nUsed by: Gemini, Qwen\n\n```toml\ndescription = \"Command description\"\n\nprompt = \"\"\"\nCommand content with {SCRIPT} and {{args}} placeholders.\n\"\"\"\n```\n\n## Directory Conventions\n\n- **CLI agents**: Usually `.<agent-name>/commands/`\n- **IDE agents**: Follow IDE-specific patterns:\n  - Copilot: `.github/prompts/`\n  - Cursor: `.cursor/commands/`\n  - Windsurf: `.windsurf/workflows/`\n\n## Argument Patterns\n\nDifferent agents use different argument placeholders:\n\n- **Markdown/prompt-based**: `$ARGUMENTS`\n- **TOML-based**: `{{args}}`\n- **Script placeholders**: `{SCRIPT}` (replaced with actual script path)\n- **Agent placeholders**: `__AGENT__` (replaced with agent name)\n\n## Testing New Agent Integration\n\n1. **Build test**: Run package creation script locally\n2. **CLI test**: Test `specify init --ai <agent>` command\n3. **File generation**: Verify correct directory structure and files\n4. **Command validation**: Ensure generated commands work with the agent\n5. **Context update**: Test agent context update scripts\n\n## Common Pitfalls\n\n1. **Using shorthand keys instead of actual CLI tool names**: Always use the actual executable name as the AGENT_CONFIG key (e.g., `\"cursor-agent\"` not `\"cursor\"`). This prevents the need for special-case mappings throughout the codebase.\n2. **Forgetting update scripts**: Both bash and PowerShell scripts must be updated when adding new agents.\n3. **Incorrect `requires_cli` value**: Set to `True` only for agents that actually have CLI tools to check; set to `False` for IDE-based agents.\n4. **Wrong argument format**: Use correct placeholder format for each agent type (`$ARGUMENTS` for Markdown, `{{args}}` for TOML).\n5. **Directory naming**: Follow agent-specific conventions exactly (check existing agents for patterns).\n6. **Help text inconsistency**: Update all user-facing text consistently (help strings, docstrings, README, error messages).\n\n## Future Considerations\n\nWhen adding new agents:\n\n- Consider the agent's native command/workflow patterns\n- Ensure compatibility with the Spec-Driven Development process\n- Document any special requirements or limitations\n- Update this guide with lessons learned\n- Verify the actual CLI tool name before adding to AGENT_CONFIG\n\n---\n\n*This documentation should be updated whenever new agents are added to maintain accuracy and completeness.*\n","source":"vscode"}}
{"timestamp":"2025-10-23T01:43:30.515Z","type":"response_item","payload":{"type":"message","role":"user","content":[{"type":"input_text","text":"<user_instructions>\n\n# AGENTS.md\n\n## About Spec Kit and Specify\n\n**GitHub Spec Kit** is a comprehensive toolkit for implementing Spec-Driven Development (SDD) - a methodology that emphasizes creating clear specifications before implementation. The toolkit includes templates, scripts, and workflows that guide development teams through a structured approach to building software.\n\n**Specify CLI** is the command-line interface that bootstraps projects with the Spec Kit framework. It sets up the necessary directory structures, templates, and AI agent integrations to support the Spec-Driven Development workflow.\n\nThe toolkit supports multiple AI coding assistants, allowing teams to use their preferred tools while maintaining consistent project structure and development practices.\n\n---\n\n## General practices\n\n- Any changes to `__init__.py` for the Specify CLI require a version rev in `pyproject.toml` and addition of entries to `CHANGELOG.md`.\n\n## Adding New Agent Support\n\nThis section explains how to add support for new AI agents/assistants to the Specify CLI. Use this guide as a reference when integrating new AI tools into the Spec-Driven Development workflow.\n\n### Overview\n\nSpecify supports multiple AI agents by generating agent-specific command files and directory structures when initializing projects. Each agent has its own conventions for:\n\n- **Command file formats** (Markdown, TOML, etc.)\n- **Directory structures** (`.claude/commands/`, `.windsurf/workflows/`, etc.)\n- **Command invocation patterns** (slash commands, CLI tools, etc.)\n- **Argument passing conventions** (`$ARGUMENTS`, `{{args}}`, etc.)\n\n### Current Supported Agents\n\n| Agent | Directory | Format | CLI Tool | Description |\n|-------|-----------|---------|----------|-------------|\n| **Claude Code** | `.claude/commands/` | Markdown | `claude` | Anthropic's Claude Code CLI |\n| **Gemini CLI** | `.gemini/commands/` | TOML | `gemini` | Google's Gemini CLI |\n| **GitHub Copilot** | `.github/prompts/` | Markdown | N/A (IDE-based) | GitHub Copilot in VS Code |\n| **Cursor** | `.cursor/commands/` | Markdown | `cursor-agent` | Cursor CLI |\n| **Qwen Code** | `.qwen/commands/` | TOML | `qwen` | Alibaba's Qwen Code CLI |\n| **opencode** | `.opencode/command/` | Markdown | `opencode` | opencode CLI |\n| **Codex CLI** | `.codex/commands/` | Markdown | `codex` | Codex CLI |\n| **Windsurf** | `.windsurf/workflows/` | Markdown | N/A (IDE-based) | Windsurf IDE workflows |\n| **Kilo Code** | `.kilocode/rules/` | Markdown | N/A (IDE-based) | Kilo Code IDE |\n| **Auggie CLI** | `.augment/rules/` | Markdown | `auggie` | Auggie CLI |\n| **Roo Code** | `.roo/rules/` | Markdown | N/A (IDE-based) | Roo Code IDE |\n| **CodeBuddy CLI** | `.codebuddy/commands/` | Markdown | `codebuddy` | CodeBuddy CLI |\n| **Amazon Q Developer CLI** | `.amazonq/prompts/` | Markdown | `q` | Amazon Q Developer CLI |\n| **Amp** | `.agents/commands/` | Markdown | `amp` | Amp CLI |\n\n### Step-by-Step Integration Guide\n\nFollow these steps to add a new agent (using a hypothetical new agent as an example):\n\n#### 1. Add to AGENT_CONFIG\n\n**IMPORTANT**: Use the actual CLI tool name as the key, not a shortened version.\n\nAdd the new agent to the `AGENT_CONFIG` dictionary in `src/specify_cli/__init__.py`. This is the **single source of truth** for all agent metadata:\n\n```python\nAGENT_CONFIG = {\n    # ... existing agents ...\n    \"new-agent-cli\": {  # Use the ACTUAL CLI tool name (what users type in terminal)\n        \"name\": \"New Agent Display Name\",\n        \"folder\": \".newagent/\",  # Directory for agent files\n        \"install_url\": \"https://example.com/install\",  # URL for installation docs (or None if IDE-based)\n        \"requires_cli\": True,  # True if CLI tool required, False for IDE-based agents\n    },\n}\n```\n\n**Key Design Principle**: The dictionary key should match the actual executable name that users install. For example:\n\n- ✅ Use `\"cursor-agent\"` because the CLI tool is literally called `cursor-agent`\n- ❌ Don't use `\"cursor\"` as a shortcut if the tool is `cursor-agent`\n\nThis eliminates the need for special-case mappings throughout the codebase.\n\n**Field Explanations**:\n\n- `name`: Human-readable display name shown to users\n- `folder`: Directory where agent-specific files are stored (relative to project root)\n- `install_url`: Installation documentation URL (set to `None` for IDE-based agents)\n- `requires_cli`: Whether the agent requires a CLI tool check during initialization\n\n#### 2. Update CLI Help Text\n\nUpdate the `--ai` parameter help text in the `init()` command to include the new agent:\n\n```python\nai_assistant: str = typer.Option(None, \"--ai\", help=\"AI assistant to use: claude, gemini, copilot, cursor-agent, qwen, opencode, codex, windsurf, kilocode, auggie, codebuddy, new-agent-cli, or q\"),\n```\n\nAlso update any function docstrings, examples, and error messages that list available agents.\n\n#### 3. Update README Documentation\n\nUpdate the **Supported AI Agents** section in `README.md` to include the new agent:\n\n- Add the new agent to the table with appropriate support level (Full/Partial)\n- Include the agent's official website link\n- Add any relevant notes about the agent's implementation\n- Ensure the table formatting remains aligned and consistent\n\n#### 4. Update Release Package Script\n\nModify `.github/workflows/scripts/create-release-packages.sh`:\n\n##### Add to ALL_AGENTS array\n\n```bash\nALL_AGENTS=(claude gemini copilot cursor-agent qwen opencode windsurf q)\n```\n\n##### Add case statement for directory structure\n\n```bash\ncase $agent in\n  # ... existing cases ...\n  windsurf)\n    mkdir -p \"$base_dir/.windsurf/workflows\"\n    generate_commands windsurf md \"\\$ARGUMENTS\" \"$base_dir/.windsurf/workflows\" \"$script\" ;;\nesac\n```\n\n#### 4. Update GitHub Release Script\n\nModify `.github/workflows/scripts/create-github-release.sh` to include the new agent's packages:\n\n```bash\ngh release create \"$VERSION\" \\\n  # ... existing packages ...\n  .genreleases/spec-kit-template-windsurf-sh-\"$VERSION\".zip \\\n  .genreleases/spec-kit-template-windsurf-ps-\"$VERSION\".zip \\\n  # Add new agent packages here\n```\n\n#### 5. Update Agent Context Scripts\n\n##### Bash script (`scripts/bash/update-agent-context.sh`)\n\nAdd file variable:\n\n```bash\nWINDSURF_FILE=\"$REPO_ROOT/.windsurf/rules/specify-rules.md\"\n```\n\nAdd to case statement:\n\n```bash\ncase \"$AGENT_TYPE\" in\n  # ... existing cases ...\n  windsurf) update_agent_file \"$WINDSURF_FILE\" \"Windsurf\" ;;\n  \"\") \n    # ... existing checks ...\n    [ -f \"$WINDSURF_FILE\" ] && update_agent_file \"$WINDSURF_FILE\" \"Windsurf\";\n    # Update default creation condition\n    ;;\nesac\n```\n\n##### PowerShell script (`scripts/powershell/update-agent-context.ps1`)\n\nAdd file variable:\n\n```powershell\n$windsurfFile = Join-Path $repoRoot '.windsurf/rules/specify-rules.md'\n```\n\nAdd to switch statement:\n\n```powershell\nswitch ($AgentType) {\n    # ... existing cases ...\n    'windsurf' { Update-AgentFile $windsurfFile 'Windsurf' }\n    '' {\n        foreach ($pair in @(\n            # ... existing pairs ...\n            @{file=$windsurfFile; name='Windsurf'}\n        )) {\n            if (Test-Path $pair.file) { Update-AgentFile $pair.file $pair.name }\n        }\n        # Update default creation condition\n    }\n}\n```\n\n#### 6. Update CLI Tool Checks (Optional)\n\nFor agents that require CLI tools, add checks in the `check()` command and agent validation:\n\n```python\n# In check() command\ntracker.add(\"windsurf\", \"Windsurf IDE (optional)\")\nwindsurf_ok = check_tool_for_tracker(\"windsurf\", \"https://windsurf.com/\", tracker)\n\n# In init validation (only if CLI tool required)\nelif selected_ai == \"windsurf\":\n    if not check_tool(\"windsurf\", \"Install from: https://windsurf.com/\"):\n        console.print(\"[red]Error:[/red] Windsurf CLI is required for Windsurf projects\")\n        agent_tool_missing = True\n```\n\n**Note**: CLI tool checks are now handled automatically based on the `requires_cli` field in AGENT_CONFIG. No additional code changes needed in the `check()` or `init()` commands - they automatically loop through AGENT_CONFIG and check tools as needed.\n\n## Important Design Decisions\n\n### Using Actual CLI Tool Names as Keys\n\n**CRITICAL**: When adding a new agent to AGENT_CONFIG, always use the **actual executable name** as the dictionary key, not a shortened or convenient version.\n\n**Why this matters:**\n\n- The `check_tool()` function uses `shutil.which(tool)` to find executables in the system PATH\n- If the key doesn't match the actual CLI tool name, you'll need special-case mappings throughout the codebase\n- This creates unnecessary complexity and maintenance burden\n\n**Example - The Cursor Lesson:**\n\n❌ **Wrong approach** (requires special-case mapping):\n\n```python\nAGENT_CONFIG = {\n    \"cursor\": {  # Shorthand that doesn't match the actual tool\n        \"name\": \"Cursor\",\n        # ...\n    }\n}\n\n# Then you need special cases everywhere:\ncli_tool = agent_key\nif agent_key == \"cursor\":\n    cli_tool = \"cursor-agent\"  # Map to the real tool name\n```\n\n✅ **Correct approach** (no mapping needed):\n\n```python\nAGENT_CONFIG = {\n    \"cursor-agent\": {  # Matches the actual executable name\n        \"name\": \"Cursor\",\n        # ...\n    }\n}\n\n# No special cases needed - just use agent_key directly!\n```\n\n**Benefits of this approach:**\n\n- Eliminates special-case logic scattered throughout the codebase\n- Makes the code more maintainable and easier to understand\n- Reduces the chance of bugs when adding new agents\n- Tool checking \"just works\" without additional mappings\n\n#### 7. Update Devcontainer files (Optional)\n\nFor agents that have VS Code extensions or require CLI installation, update the devcontainer configuration files:\n\n##### VS Code Extension-based Agents\n\nFor agents available as VS Code extensions, add them to `.devcontainer/devcontainer.json`:\n\n```json\n{\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        // ... existing extensions ...\n        // [New Agent Name]\n        \"[New Agent Extension ID]\"\n      ]\n    }\n  }\n}\n```\n\n##### CLI-based Agents\n\nFor agents that require CLI tools, add installation commands to `.devcontainer/post-create.sh`:\n\n```bash\n#!/bin/bash\n\n# Existing installations...\n\necho -e \"\\n🤖 Installing [New Agent Name] CLI...\"\n# run_command \"npm install -g [agent-cli-package]@latest\" # Example for node-based CLI\n# or other installation instructions (must be non-interactive and compatible with Linux Debian \"Trixie\" or later)...\necho \"✅ Done\"\n\n```\n\n**Quick Tips:**\n\n- **Extension-based agents**: Add to the `extensions` array in `devcontainer.json`\n- **CLI-based agents**: Add installation scripts to `post-create.sh`\n- **Hybrid agents**: May require both extension and CLI installation\n- **Test thoroughly**: Ensure installations work in the devcontainer environment\n\n## Agent Categories\n\n### CLI-Based Agents\n\nRequire a command-line tool to be installed:\n\n- **Claude Code**: `claude` CLI\n- **Gemini CLI**: `gemini` CLI  \n- **Cursor**: `cursor-agent` CLI\n- **Qwen Code**: `qwen` CLI\n- **opencode**: `opencode` CLI\n- **Amazon Q Developer CLI**: `q` CLI\n- **CodeBuddy CLI**: `codebuddy` CLI\n- **Amp**: `amp` CLI\n\n### IDE-Based Agents\n\nWork within integrated development environments:\n\n- **GitHub Copilot**: Built into VS Code/compatible editors\n- **Windsurf**: Built into Windsurf IDE\n\n## Command File Formats\n\n### Markdown Format\n\nUsed by: Claude, Cursor, opencode, Windsurf, Amazon Q Developer, Amp\n\n```markdown\n---\ndescription: \"Command description\"\n---\n\nCommand content with {SCRIPT} and $ARGUMENTS placeholders.\n```\n\n### TOML Format\n\nUsed by: Gemini, Qwen\n\n```toml\ndescription = \"Command description\"\n\nprompt = \"\"\"\nCommand content with {SCRIPT} and {{args}} placeholders.\n\"\"\"\n```\n\n## Directory Conventions\n\n- **CLI agents**: Usually `.<agent-name>/commands/`\n- **IDE agents**: Follow IDE-specific patterns:\n  - Copilot: `.github/prompts/`\n  - Cursor: `.cursor/commands/`\n  - Windsurf: `.windsurf/workflows/`\n\n## Argument Patterns\n\nDifferent agents use different argument placeholders:\n\n- **Markdown/prompt-based**: `$ARGUMENTS`\n- **TOML-based**: `{{args}}`\n- **Script placeholders**: `{SCRIPT}` (replaced with actual script path)\n- **Agent placeholders**: `__AGENT__` (replaced with agent name)\n\n## Testing New Agent Integration\n\n1. **Build test**: Run package creation script locally\n2. **CLI test**: Test `specify init --ai <agent>` command\n3. **File generation**: Verify correct directory structure and files\n4. **Command validation**: Ensure generated commands work with the agent\n5. **Context update**: Test agent context update scripts\n\n## Common Pitfalls\n\n1. **Using shorthand keys instead of actual CLI tool names**: Always use the actual executable name as the AGENT_CONFIG key (e.g., `\"cursor-agent\"` not `\"cursor\"`). This prevents the need for special-case mappings throughout the codebase.\n2. **Forgetting update scripts**: Both bash and PowerShell scripts must be updated when adding new agents.\n3. **Incorrect `requires_cli` value**: Set to `True` only for agents that actually have CLI tools to check; set to `False` for IDE-based agents.\n4. **Wrong argument format**: Use correct placeholder format for each agent type (`$ARGUMENTS` for Markdown, `{{args}}` for TOML).\n5. **Directory naming**: Follow agent-specific conventions exactly (check existing agents for patterns).\n6. **Help text inconsistency**: Update all user-facing text consistently (help strings, docstrings, README, error messages).\n\n## Future Considerations\n\nWhen adding new agents:\n\n- Consider the agent's native command/workflow patterns\n- Ensure compatibility with the Spec-Driven Development process\n- Document any special requirements or limitations\n- Update this guide with lessons learned\n- Verify the actual CLI tool name before adding to AGENT_CONFIG\n\n---\n\n*This documentation should be updated whenever new agents are added to maintain accuracy and completeness.*\n\n\n</user_instructions>"}]}}
{"timestamp":"2025-10-23T01:43:30.515Z","type":"response_item","payload":{"type":"message","role":"user","content":[{"type":"input_text","text":"<environment_context>\n  <cwd>c:\\Imagine\\AI\\Playground\\spec-kit\\OpenDentalQueryTool</cwd>\n  <approval_policy>never</approval_policy>\n  <sandbox_mode>danger-full-access</sandbox_mode>\n  <network_access>enabled</network_access>\n  <shell>powershell.exe</shell>\n</environment_context>"}]}}
